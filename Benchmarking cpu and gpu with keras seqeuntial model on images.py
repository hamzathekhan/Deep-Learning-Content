# -*- coding: utf-8 -*-
"""Deep Learning Projects S.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FnvNo8vhF_aEAM9Psl7bbKIMsnO89nV-
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
# %matplotlib inline

# Checking physical devices available for NN
tf.config.experimental.list_physical_devices()

# For Checking Cuda in tf
tf.test.is_built_with_cuda()

(x_train,y_train) , (x_test,y_test) = keras.datasets.cifar10.load_data()

plt.figure(figsize=(10,1))
plt.imshow(x_train[400])

y_train[400][0]

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]
classes[y_train[400][0]]

# SCaling the x  values
x_train_scaled = x_train/255
x_test_scaled = x_test/255

x_train_scaled[0]

y_train[0]

# One Hot Encoding
y_train_categorical = keras.utils.to_categorical(y_train,num_classes=10)

y_train_categorical[0]

# model creation

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(32,32,3)),
    keras.layers.Dense(3000,activation="relu"),
    keras.layers.Dense(1000,activation="relu"),
    keras.layers.Dense(10,activation="sigmoid")
])


model.compile(optimizer="SGD",loss="categorical_crossentropy",metrics=["accuracy"])

model.fit(x_train_scaled,y_train_categorical,epochs=5)

y_predicted = model.predict(x_test_scaled)

classes[y_predicted[5].argmax()]

classes[y_test[5][0]]

model.evaluate(x_test_scaled,y_test)

def get_model():
  model = keras.Sequential([
    keras.layers.Flatten(input_shape=(32,32,3)),
    keras.layers.Dense(3000,activation="relu"),
    keras.layers.Dense(1000,activation="relu"),
    keras.layers.Dense(10,activation="sigmoid")
  ])


  model.compile(optimizer="SGD",loss="categorical_crossentropy",metrics=["accuracy"])

  return model

"""BenchMarking CPU with Images Model"""

# Commented out IPython magic to ensure Python compatibility.
# %%timeit -n1 -r1
# with tf.device("/cpu:0"):
#   model = get_model()
#   model.fit(x_train_scaled,y_train_categorical,epochs=1)

"""BenchMarking GPU with Images Model"""

with tf.device("/gpu:0"):
  model = get_model()
  model.fit(x_train_scaled,y_train_categorical,epochs=1)