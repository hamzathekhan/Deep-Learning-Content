# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FnvNo8vhF_aEAM9Psl7bbKIMsnO89nV-
"""

!pip install tensorflow
!pip install opencv-python
!pip install sklearn

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
import cv2 as cv
import pandas as pd
# %matplotlib inline

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
from sklearn.datasets import load_digits

digits = load_digits()

digits.data[0]

# plt.gray()
for i in range(5):
  plt.matshow(digits.images[i])

digits.target[0:5]

from sklearn.model_selection import train_test_split

X_train , X_test , y_train , y_test = train_test_split(digits.data,digits.target,test_size=0.2)

len(X_train)

len(X_test)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train,y_train)

model.score(X_test,y_test)

y_prediction = model.predict(X_test)

y_prediction

plt.matshow(digits.images[67])

digits.target[67]

model.predict([digits.data[67]])

model.predict(digits.data[0:5])

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_prediction)

import seaborn as sn

sn.heatmap(cm,annot=True)
plt.xlabel("Prediction")
plt.ylabel("Truth")
plt.show()